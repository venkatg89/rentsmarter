{"version":3,"sources":["index.tsx"],"names":["React","createContext","useCallback","useContext","useMemo","useState","Dimensions","StyleSheet","TouchableOpacity","ReactNativeModal","MoadlComponent","closeModal","idx","modals","isNextExist","length","MyModal","modalProps","withClickOutside","onClickOutside","styles","clickOutside","modalsContext","openModal","closeAllModals","ModalsProvider","children","setModals","isModalsExist","prev","undefined","filter","_i","id","useNestedModals","height","width","get","create","flex","position","backgroundColor","zIndex"],"mappings":"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","sourcesContent":["import React, {\n  ComponentType,\n  createContext,\n  ReactElement,\n  ReactNode,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from 'react';\nimport { Dimensions, StyleSheet, TouchableOpacity } from 'react-native';\nimport ReactNativeModal, { ModalProps } from 'react-native-modal';\n\nexport type TModalProps = {\n  withClickOutside?: boolean;\n  onClickOutside?: () => void;\n} & Partial<ModalProps>;\n\nexport interface INestedModalsContext {\n  closeModal: (idx?: number) => void;\n  openModal: (MyModal: ReactElement, modalProps?: TModalProps) => number;\n  closeAllModals: () => void;\n}\n\ninterface IModal {\n  MyModal: ReactElement;\n  modalProps: TModalProps;\n}\n\nconst MoadlComponent: ComponentType<{\n  idx: number;\n  modals: IModal[];\n  closeModal: (idx?: number) => void;\n}> = ({ closeModal, idx, modals }) => {\n  const isNextExist = useMemo<boolean>(\n    () => modals.length - 1 > idx,\n    [modals.length, idx]\n  );\n  const {\n    MyModal,\n    modalProps: {\n      withClickOutside,\n      onClickOutside = () => closeModal(),\n      ...modalProps\n    },\n  } = useMemo<IModal>(() => modals[idx], [idx, modals]);\n\n  return (\n    <ReactNativeModal {...modalProps} isVisible>\n      {MyModal}\n\n      {isNextExist && (\n        <MoadlComponent closeModal={closeModal} idx={idx + 1} modals={modals} />\n      )}\n      {withClickOutside && (\n        <TouchableOpacity\n          onPress={onClickOutside}\n          style={styles.clickOutside}\n        />\n      )}\n    </ReactNativeModal>\n  );\n};\n\nexport const modalsContext = createContext<INestedModalsContext>({\n  closeModal: () => {},\n  openModal: () => 0,\n  closeAllModals: () => {},\n});\n\nexport const ModalsProvider = ({ children }: { children: ReactNode }) => {\n  const [modals, setModals] = useState<IModal[]>([]);\n  const isModalsExist = useMemo<boolean>(\n    () => !!modals.length,\n    [modals.length]\n  );\n\n  const openModal = useCallback(\n    (MyModal: ReactElement, modalProps: TModalProps = {}) => {\n      setModals((prev) => [...prev, { MyModal, modalProps }]);\n      return modals.length;\n    },\n    [modals]\n  );\n\n  const closeModal = useCallback((idx) => {\n    if (typeof idx != 'number') idx = undefined;\n    setModals((prev) =>\n      prev.filter((_i: IModal, id: number) => id != (idx ?? prev.length - 1))\n    );\n  }, []);\n\n  const closeAllModals = useCallback(() => setModals([]), []);\n\n  return (\n    <modalsContext.Provider value={{ openModal, closeModal, closeAllModals }}>\n      {children}\n      {isModalsExist && (\n        <MoadlComponent closeModal={closeModal} modals={modals} idx={0} />\n      )}\n    </modalsContext.Provider>\n  );\n};\n\nconst useNestedModals = (): INestedModalsContext => useContext(modalsContext);\n\nexport default useNestedModals;\n\nconst { height, width } = Dimensions.get('screen');\nconst styles = StyleSheet.create({\n  clickOutside: {\n    height,\n    width,\n    flex: 1,\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    zIndex: -1,\n  },\n});\n"]}