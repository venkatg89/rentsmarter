function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { createContext, useCallback, useContext, useMemo, useState } from 'react';
import { Dimensions, StyleSheet, TouchableOpacity } from 'react-native';
import ReactNativeModal from 'react-native-modal';

const MoadlComponent = ({
  closeModal,
  idx,
  modals
}) => {
  const isNextExist = useMemo(() => modals.length - 1 > idx, [modals.length, idx]);
  const {
    MyModal,
    modalProps: {
      withClickOutside,
      onClickOutside = () => closeModal(),
      ...modalProps
    }
  } = useMemo(() => modals[idx], [idx, modals]);
  return /*#__PURE__*/React.createElement(ReactNativeModal, _extends({}, modalProps, {
    isVisible: true
  }), MyModal, isNextExist && /*#__PURE__*/React.createElement(MoadlComponent, {
    closeModal: closeModal,
    idx: idx + 1,
    modals: modals
  }), withClickOutside && /*#__PURE__*/React.createElement(TouchableOpacity, {
    onPress: onClickOutside,
    style: styles.clickOutside
  }));
};

export const modalsContext = /*#__PURE__*/createContext({
  closeModal: () => {},
  openModal: () => 0,
  closeAllModals: () => {}
});
export const ModalsProvider = ({
  children
}) => {
  const [modals, setModals] = useState([]);
  const isModalsExist = useMemo(() => !!modals.length, [modals.length]);
  const openModal = useCallback((MyModal, modalProps = {}) => {
    setModals(prev => [...prev, {
      MyModal,
      modalProps
    }]);
    return modals.length;
  }, [modals]);
  const closeModal = useCallback(idx => {
    if (typeof idx != 'number') idx = undefined;
    setModals(prev => prev.filter((_i, id) => {
      var _idx;

      return id != ((_idx = idx) !== null && _idx !== void 0 ? _idx : prev.length - 1);
    }));
  }, []);
  const closeAllModals = useCallback(() => setModals([]), []);
  return /*#__PURE__*/React.createElement(modalsContext.Provider, {
    value: {
      openModal,
      closeModal,
      closeAllModals
    }
  }, children, isModalsExist && /*#__PURE__*/React.createElement(MoadlComponent, {
    closeModal: closeModal,
    modals: modals,
    idx: 0
  }));
};

const useNestedModals = () => useContext(modalsContext);

export default useNestedModals;
const {
  height,
  width
} = Dimensions.get('screen');
const styles = StyleSheet.create({
  clickOutside: {
    height,
    width,
    flex: 1,
    position: 'absolute',
    backgroundColor: 'transparent',
    zIndex: -1
  }
});
//# sourceMappingURL=index.js.map