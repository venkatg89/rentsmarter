"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ModalsProvider = exports.modalsContext = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeModal = _interopRequireDefault(require("react-native-modal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const MoadlComponent = ({
  closeModal,
  idx,
  modals
}) => {
  const isNextExist = (0, _react.useMemo)(() => modals.length - 1 > idx, [modals.length, idx]);
  const {
    MyModal,
    modalProps: {
      withClickOutside,
      onClickOutside = () => closeModal(),
      ...modalProps
    }
  } = (0, _react.useMemo)(() => modals[idx], [idx, modals]);
  return /*#__PURE__*/_react.default.createElement(_reactNativeModal.default, _extends({}, modalProps, {
    isVisible: true
  }), MyModal, isNextExist && /*#__PURE__*/_react.default.createElement(MoadlComponent, {
    closeModal: closeModal,
    idx: idx + 1,
    modals: modals
  }), withClickOutside && /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    onPress: onClickOutside,
    style: styles.clickOutside
  }));
};

const modalsContext = /*#__PURE__*/(0, _react.createContext)({
  closeModal: () => {},
  openModal: () => 0,
  closeAllModals: () => {}
});
exports.modalsContext = modalsContext;

const ModalsProvider = ({
  children
}) => {
  const [modals, setModals] = (0, _react.useState)([]);
  const isModalsExist = (0, _react.useMemo)(() => !!modals.length, [modals.length]);
  const openModal = (0, _react.useCallback)((MyModal, modalProps = {}) => {
    setModals(prev => [...prev, {
      MyModal,
      modalProps
    }]);
    return modals.length;
  }, [modals]);
  const closeModal = (0, _react.useCallback)(idx => {
    if (typeof idx != 'number') idx = undefined;
    setModals(prev => prev.filter((_i, id) => {
      var _idx;

      return id != ((_idx = idx) !== null && _idx !== void 0 ? _idx : prev.length - 1);
    }));
  }, []);
  const closeAllModals = (0, _react.useCallback)(() => setModals([]), []);
  return /*#__PURE__*/_react.default.createElement(modalsContext.Provider, {
    value: {
      openModal,
      closeModal,
      closeAllModals
    }
  }, children, isModalsExist && /*#__PURE__*/_react.default.createElement(MoadlComponent, {
    closeModal: closeModal,
    modals: modals,
    idx: 0
  }));
};

exports.ModalsProvider = ModalsProvider;

const useNestedModals = () => (0, _react.useContext)(modalsContext);

var _default = useNestedModals;
exports.default = _default;

const {
  height,
  width
} = _reactNative.Dimensions.get('screen');

const styles = _reactNative.StyleSheet.create({
  clickOutside: {
    height,
    width,
    flex: 1,
    position: 'absolute',
    backgroundColor: 'transparent',
    zIndex: -1
  }
});
//# sourceMappingURL=index.js.map